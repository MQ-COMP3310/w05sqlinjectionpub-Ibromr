
Exercise 5.1.1. Develop the beginnings and principles of a policy on logging that should guide the
implementation of a website and/or app that manages vaccination data for patients; data that can be
added and modified by medical professionals.

• what data should be logged locally?
    passwords, personal data: like phone, IDs, addresses.

• what data should be logged on the server side?
    password, username, secret word...

• what user actions should be logged?
    entering the system, exiting the system, specific request like downloading, and uploading documents to system.

• what data access actions should be logged?
    entering, exiting 







About exercise
  
1- no large exceptions --- what is game-related info or not? 
2- does not pass the regex, info, warning, or error  (appropriate level is warning)  what is loginf level here meaning?
3- severe level, 
4- as information 
5- warning level for exeptions, do not log exections, use generic
6- ???

two submussion
App.java
SQLi            







public void addValidWord(int id, String word) {

        String sql = "INSERT INTO validWords(id,word) VALUES(? ?)";
                                                        //'" + id + "','" + word + "'
        try (Connection conn = DriverManager.getConnection(databaseURL);
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setInt(1, id);
                    pstmt.setString(1,word);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
iHateRegex
Now you have two problems.


    }




public boolean isValidWord(String guess) {
        String sql = "SELECT count(id) as total FROM validWords WHERE word like ?;";

        try (Connection conn = DriverManager.getConnection(databaseURL);
                PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, guess);
            ResultSet resultRows = stmt.executeQuery();
            if (resultRows.next()) {
                int result = resultRows.getInt("total");
                return (result >= 1);
            }

            return false;

        } catch (SQLException e) {
            System.out.println(e.getMessage());
            return false;
        }

    }





try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("Enter a 4 letter word for a guess or q to quit: ");
            String guess = scanner.nextLine();

            while (!guess.equals("q")) {

                if (guess.matches("^[a-zA-Z]{4}$")) {

                    System.out.println("You've guessed '" + guess+"'.");

                    if (wordleDatabaseConnection.isValidWord(guess)) { 
                        System.out.println("Success! It is in the the list.\n");
                    }else{
                        System.out.println("Sorry. This word is NOT in the the list.\n");
                    } 
                } else {
                    System.out.println("Please " + guess + "");
                }

                
            }
        }

















        App  YEDEK:

        package workshop05code;

import java.io.BufferedReader;
//Included for the logging exercise
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

/**
 *
 * @author sqlitetutorial.net
 */
public class App {
    // Start code for logging exercise
    static {
        // must set before the Logger
        // loads logging.properties from the classpath
        try {// resources\logging.properties
            LogManager.getLogManager().readConfiguration(new FileInputStream("resources/logging.properties"));
        } catch (SecurityException | IOException e1) {
            e1.printStackTrace();
        }
    }

    private static final Logger logger = Logger.getLogger(App.class.getName());
    // End code for logging exercise

    public String succesLogin() {
        return "Success! It is in the list.\n";
    }

    

    public String startMessage() {
        return "Enter a 4 letter word for a guess or q to quit: ";
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SQLiteConnectionManager wordleDatabaseConnection = new SQLiteConnectionManager("words.db");

        wordleDatabaseConnection.createNewDatabase("words.db");
        if (wordleDatabaseConnection.checkIfConnectionDefined()) {
            //System.out.println("Wordle created and connected.");
            logger.log(Level.INFO,"Wordle created and connected.");
        } else {
            //System.out.println("Not able to connect. Sorry!");
            logger.log(Level.INFO,"Not able to connect. Sorry!");
            return;
        }
        if (wordleDatabaseConnection.createWordleTables()) {
            //System.out.println("Wordle structures in place.");
            logger.log(Level.INFO,"Wordle structures in place.");
        } else {
            //System.out.println("Not able to launch. Sorry!");
            logger.log(Level.INFO,"Not able to launch. Sorry!");
            return;
        }

        // let's add some words to valid 4 letter words from the data.txt file

        // try (BufferedReader br = new BufferedReader(new FileReader("resources/data.txt"))) {
        //     String line;
        //     int i = 1;
        //     while ((line = br.readLine()) != null) {
        //         System.out.println(line);
        //         wordleDatabaseConnection.addValidWord(i, line);
        //         i++;
        //     }

        // } catch (IOException e) {
        //     System.out.println("Not able to load . Sorry!");
        //     System.out.println(e.getMessage());
        //     return;
        // }

        // let's get them to enter a word
            
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.print("Enter a 4 letter word for a guess or q to quit: ");
            String guess = scanner.nextLine();


            while (!guess.equals("q")) {
                 // Validate the input to be exactly 4 lowercase letters
                if (guess.matches("^[a-z]{4}$") && logger.isLoggable(Level.WARNING)) {
                    //System.out.println("You've guessed '" + guess + "'.");
                    logger.log(Level.WARNING,"You''ve guessed ''{0}''.", new Object[]{guess});

                    if (wordleDatabaseConnection.isValidWord(guess) && logger.isLoggable(Level.INFO)) {
                        //System.out.println("Success! It is in the list.\n"); 
                        logger.info(new App().succesLogin()); // Replaces System.out.println 
                     } else {
                        //System.out.println("Sorry. This word is NOT in the list.\n");
                        logger.log(Level.SEVERE,"Sorry. This word is NOT in the list.\n");
                    }
                } 
                    //else {
                    //System.out.println("Invalid input!\n");
            

                System.out.print("Enter a 4 letter word for a guess or q to quit: " );
                guess = scanner.nextLine();
            }
        } catch (NoSuchElementException | IllegalStateException e) {
            //e.printStackTrace();
            logger.log(Level.WARNING, "Message", e);
        } 

    }
}